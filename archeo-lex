#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# 
# Archéo Lex – Pure Histoire de la Loi française
# – crée un dépôt Git des lois françaises écrites en syntaxe Markdown
# 
# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# the LICENSE file for more details.

# Imports
from docopt import docopt
import os
import os.path

from marcheolex import logging, logger
from marcheolex import version_archeolex
from marcheolex.exporterlegi import creer_historique_legi
from marcheolex.pousserlestextes import pousser_les_textes_sur_gitlab

# Manuel d’aide
aide = ('''Usage: archeo-lex [--aide] [--debug] [--help] [--version] [--textes=<TEXTES>] [--base=<BASE>] [--livraison=<DATE>] [--exporterlegi] [--mise-a-jour | --nouveau] [--dialecte=<DIALECTE>] [--historique=<HISTORIQUE>] [--metadonnees] [--organisation=<TYPE>] [--bddlegi=<fichier>] [--dossier=<dossier>] [--production] [--gitlab-host=<GITHOST>] [--gitlab-token=<GITTOKEN>] [--gitlab-group=<GITGROUP>] [--git-server=<GITSERVER>] [--git-key=<GITKEY>] [--calcules=<FICHIER>]

-t --textes=<TEXTES>       Types de textes à télécharger :
                             - "constitution-de-1958",
                             - "codes",
                             - nom du code ("code-pénal"…),
                             - identifiant Légifrance (paramètre « cidTexte »)
                             - fichier comportant un texte par ligne
                             - "tout"
                             - "tout-obsolete"
                             - "aleatoire-NOMBRE"
-b --base=<BASE>           Base de données DILA ("LEGI"…)
-l --livraison=<DATE>      Date et heure de la livraison souhaitée
                             - "AAAAMMJJ-HHMMSS ("20140718-113010"…)
                             - "fondation"
                             - "tout"


   --exporterlegi          Exporter les textes (legi.py)


   --mise-a-jour           Effectuer seulement une mise à jour
   --nouveau               Effacer et repartir du début, sauf le téléchargement


   --dialecte=<DIALECTE>   Dialecte de structuration des textes :
                             - "markdown" (défaut)
   --historique=<HIST>     Fabrique l’historique avec le système :
                             - "git" (défaut)
                             - "fichiers" : plusieurs fichiers avec les dates [inactif]
   --metadonnees           Afficher les métadonnées dans le texte
   --organisation=<TYPE>   Organisation de l’arborescence des fichiers :
                             - "fichier-unique" (défaut) : unique fichier
                             - "repertoires-simple" : un répertoire par article, sans hiérarchie
                             - "repertoires-hiérarchie" : un répertoire par section ou article [inactif]


   --bddlegi=<fichier>     Nom de la base de données de legi.py, par défaut "legi.sqlite"
   --dossier=<dossier>     Dossier de sortie, par défaut "textes"
   --production            Production en masse, active les options de performance

   --gitlab-host=GITHOST   Gitlab où doit être poussé les dépôts
   --gitlab-token=GITTOKEN Token d’authentification Gitlab
   --gitlab-group=GITGROUP Groupe Gitlab où pousser les textes
   --git-server=GITSERVER  Serveur et utilisateur pouvant pousser en SSH (ssh://user@example.org:2222 or user@example.org)
   --git-key=GITKEY        Fichier de la clé SSH pour pousser les textes

   --calcules=<FICHIER>    Fichier contenant la liste des textes calculés


-a --aide                  Afficher ce message d’aide
-h --help                  Afficher ce message d’aide
-d --debug                 Données de DEBUG affichées
-v --version               Version d’Archéo Lex
''')


def principal(arguments):
    
    # Action "version"
    if arguments.get('--version') or arguments.get('-v'):
        print('Archéo Lex – pure Histoire de Loi française – version '+version_archeolex)
        return

    # Action "aide"
    if arguments.get('--aide') or arguments.get('--help'):
        print(aide)
        return

    if arguments.get('--debug') or arguments.get('-d'):
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
    
    # Actions à considérer
    action_exporterlegi = arguments.get('--exporterlegi') or True

    action_gitlab = False
    if arguments.get('--gitlab-host') and arguments.get('--gitlab-token') and arguments.get('--gitlab-group') and arguments.get('--git-server') and arguments.get('--git-key'):
        action_gitlab = True
    
    if not(action_exporterlegi):
        action_exporterlegi = True
    
    # Lecture des données de format
    data = {}
    data['textes'] = ((arguments.get('--textes') or '') or 'LEGITEXT000006069414')
    data['base'] = arguments.get('--base') or 'LEGI'
    data['livraison'] = arguments.get('--livraison') or 'tout'
    data['format'] = {}
    data['format']['dialecte'] = arguments.get('--format') or 'markdown'
    data['format']['historique'] = arguments.get('--historique') or 'git'
    data['format']['metadonnees'] = arguments.get('--metadonnees') or False
    data['format']['organisation'] = arguments.get('--organisation') or 'fichier-unique'
    
    # Lecture des autres paramètres
    data['bddlegi'] = (arguments.get('--bddlegi') or '') or 'cache/sql/legi.sqlite'
    data['dossier'] = (arguments.get('--dossier') or '') or 'textes'
    data['production'] = arguments.get('--production') or False
    data['effacer'] = not arguments.get('--mise-a-jour') or arguments.get('--nouveau') or False
    #data['effacer'] = arguments.get('--nouveau') or not arguments.get('--mise-à-jour') or False
    data['gitlab-host'] = arguments.get('--gitlab-host') or ''
    data['gitlab-token'] = arguments.get('--gitlab-token') or ''
    data['gitlab-group'] = arguments.get('--gitlab-group') or ''
    data['git-server'] = arguments.get('--git-server') or ''
    data['git-key'] = arguments.get('--git-key') or ''
    data['calcules'] = arguments.get('--calcules') or ''
    
    # Création du dossiers des textes
    if not os.path.exists(data['dossier']):
       os.makedirs(data['dossier'])

    textes = []
    if action_exporterlegi:
        logger.info('Création de l’historique (legi.py)')
        textes = creer_historique_legi(data['textes'], data['format'], data['dossier'], data['bddlegi'], data['production'])
    
    if action_gitlab:
        logger.info('Envoi sur Gitlab')
        pousser_les_textes_sur_gitlab(textes, data['dossier'], data['gitlab-host'], data['gitlab-token'], data['gitlab-group'], data['git-server'], data['git-key'], data['calcules'])

if __name__ == "__main__":
    principal(docopt(aide, help=False))

# vim: set ts=4 sw=4 sts=4 et:

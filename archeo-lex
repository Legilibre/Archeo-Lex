#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 
# Archéo Lex – Pure Histoire de la Loi française
# – crée un dépôt Git des lois françaises écrites en syntaxe Markdown
# 
# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# the LICENSE file for more details.

# Imports
from __future__ import unicode_literals
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from docopt import docopt
import os
import os.path

from marcheolex import logging, logger
from marcheolex import version_archeolex
from marcheolex.basededonnees import initialisation_bdd
from marcheolex.telecharger import obtenir_identifiants
from marcheolex.telecharger import telecharger_fichiers_base
from marcheolex.ranger import ranger
from marcheolex.exporter import creer_historique
from marcheolex.exporter import creer_historique_texte
from marcheolex.utilitaires import nop
from marcheolex.utilitaires import obtenir_tous_textes

# Manuel d’aide
aide = ('''Usage: archeo-lex [--aide] [--debug] [--help] [--textes=<TEXTES>] [--base=<BASE>] [--livraison=<DATE>] [--format=<FORMAT>] [--versionnement=<VERS>] [--metadonnees] [--initialisation] [--rechercher-xml] [--télécharger] [--ranger] [--lier] [--exporter] [--mise-a-jour | --nouveau] [--bdd=<fichier>] [--cache=<dossier>] [--dossier=<dossier>]

-t --textes=<TEXTES>       Types de textes à télécharger :
                             - "constitution-de-1958",
                             - "codes",
                             - nom du code ("code-pénal"…),
                             - identifiant Légifrance (paramètre « cidTexte »)
-b --base=<BASE>           Base de données DILA ("LEGI"…)
-l --livraison=<DATE>      Date et heure de la livraison souhaitée
                             - "AAAAMMJJ-HHMMSS ("20140718-113010"…)
                             - "fondation"
                             - "tout"
-f --format=<FORMAT>       Format de sortie des textes :
                             - "markdown" (défaut)
-v --versionnement=<VERS>  Versionner avec le système :
                             - "git" (défaut)
                             - "fichiers" : plusieurs fichiers avec les dates
-d --debug                 Données de DEBUG affichées
-m --metadonnees           Afficher les métadonnées dans le texte

   --initialisation        Vérifier les dépendances, initialiser la base
   --rechercher-xml        Rechercher les textes dans les données XML
   --télécharger           Télécharger la base XML
   --ranger                Ranger les données dans la base de données
   --lier                  Lier les versions d’articles aux versions de textes
   --exporter              Exporter les textes

   --mise-a-jour           Effectuer seulement une mise à jour
   --nouveau               Effacer et repartir du début, sauf le téléchargement

   --bdd=<fichier>         Nom de la base de données, par défaut "archeo-lex.sqlite"
   --cache=<dossier>       Dossier de cache, par défaut "cache"
   --dossier=<dossier>     Dossier de sortie, par défaut "textes"

-a --aide                  Afficher ce message d’aide
-h --help                  Afficher ce message d’aide
''')


def principal(arguments):
    
    # Action "aide"
    if arguments.get('--aide') or arguments.get('--help'):
        print(aide)
        return

    if arguments.get('--debug') or arguments.get('-d'):
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
    
    # Actions à considérer
    action_initialisation = arguments.get('--initialisation') or False
    action_rechercher_xml = arguments.get('--rechercher-xml') or False
    action_telecharger = arguments.get('--télécharger') or False
    action_ranger = arguments.get('--ranger') or False
    action_lier = arguments.get('--lier') or False
    action_exporter = arguments.get('--exporter') or False
    
    if not(action_initialisation or action_rechercher_xml or action_telecharger or action_ranger or action_lier or action_exporter):
        action_initialisation = action_rechercher_xml = action_telecharger = action_ranger = action_lier = action_exporter = True
    
    # Lecture des données de format
    data = {}
    data['textes'] = ((arguments.get('--textes') or '').decode('utf-8') or 'code-de-la-propriété-intellectuelle').split(',')
    data['base'] = arguments.get('--base') or 'LEGI'
    data['livraison'] = arguments.get('--livraison') or 'fondation'
    data['format'] = arguments.get('--format') or 'markdown'
    data['historique'] = arguments.get('--historique') or 'git'
    data['metadonnees'] = arguments.get('--metadonnees') or False
    
    # Lecture des autres paramètres
    data['bdd'] = (arguments.get('--bdd') or '').decode('utf-8') or 'archeo-lex.sqlite'
    data['cache'] = (arguments.get('--cache') or '').decode('utf-8') or 'cache'
    data['dossier'] = (arguments.get('--dossier') or '').decode('utf-8') or 'textes'
    data['effacer'] = not arguments.get('--mise-a-jour') or arguments.get('--nouveau') or False
    #data['effacer'] = arguments.get('--nouveau') or not arguments.get('--mise-à-jour') or False
    
    # Création des dossiers de cache
    for dir in (data['cache'], data['cache']+'/bases-xml', data['cache']+'/divers', data['cache']+'/html', data['cache']+'/markdown', data['cache']+'/sql', data['dossier']):
        if not os.path.exists(dir):
           os.makedirs(dir)

    # Recherche des identifiants
    if data['textes'] == ['tous']:
        data['textes'] = obtenir_tous_textes(data['base'], data['cache'])
    else:
        logger.info('Recherche des identifiants')
        data['textes'] = obtenir_identifiants(data['textes'], data['cache'])
    logger.info('Textes demandés')
    if len(data['textes']) > 10:
        logger.info('  ({} textes)'.format(len(data['textes'])))
    else:
        for t in data['textes']:
            logger.info('* {} : {}'.format(t[1], t[0]))
    
    # Exécution des actions
    if action_initialisation:
        logger.info('Initialisation de la base de données')
        initialisation_bdd(data['bdd'], data['cache'], data['effacer'])
    
    if action_rechercher_xml:
        nop()
    
    if action_telecharger:
        logger.info('Téléchargement des fichiers XML')
        telecharger_fichiers_base(data['base'], data['livraison'], data['cache'])
    
    if action_ranger:
        logger.info('Rangement des données dans la base de données')
        ranger(data['textes'], data['cache'])
    
    #if action_lier:
    #    lier(data['textes'], data['cache'])
    
    if action_exporter:
        logger.info('Création de l’historique')
        creer_historique(data['textes'], data['format'], data['dossier'], data['cache'])

if __name__ == "__main__":
    principal(docopt(aide, version=version_archeolex, help=False))

